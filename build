#!/bin/bash

function begin_stage() {
	local stage_name=$1
	local distfile_mask=$2

	echo -ne "\033]0;${stage_name} stage\007"
	echo " * Cleaning and unpacking ${stage_name}"
	rm -rf $WORK/*

	if echo $distfile_mask | grep -q '\.tgz$' ; then
		tar -xzf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tar\.gz$' ; then
		tar -xzf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tar\.bz2$' ; then
		tar -xjf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tar\.xz$' ; then
		tar --xz -xf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.zip$' ; then
		unzip -d $WORK ${DIST}/$distfile_mask
	fi

	cd $WORK/`echo $distfile_mask | sed 's/\*.*//'`* || cd $WORK
	echo " * Compiling ${stage_name}"
	sleep $PAUSE
}

function complete_stage() {
    local next=$1

    cd $ROOT
    echo -n $next > $TARGET/stage
    sleep $PAUSE
}

if [[ ! ${8} ]] ; then
	echo
	echo "Pass all build options or use build-* wrappers instead."
	echo
	echo "<1 build env path> <2 target path> <3 work dir> <4 distfiles dir> <5 lux src>..."
	echo "...<6 generic build flags> <7 lux build flags> <8 CHOST> [9 stage]"
	echo
	echo "	Stage 0.1 - zlib"
	echo "	Stage 0.2 - bzip2"
	echo "	Stage 0.3 - lzma"
	echo "	Stage 1.1 - boost"
	echo "	Stage 1.2 - jpeg"
	echo "	Stage 1.3 - tiff"
	echo "	Stage 1.4 - png"
	echo "	Stage 1.5 - freetype"
	echo "	Stage 1.6 - openexr"
	echo "	Stage 2.1 - openimageio"
	echo "	Stage 3   - Qt"
	echo "	Stage 4.1 - TBB"
	echo "	Stage 4.2 - Oidn"
	echo "	Stage 4.3 - Embree"
	echo "	Stage 4.4 - C-blosc"
	echo "	Stage 4.5 - NVRTC"
	echo "	Stage 5   - luxcore"
	echo "	Stage 6   - luxmark (optional)"
	echo
	exit 1
fi

STAGE=$9
ROOT="$1"
TARGET="$2"
WORK="$3"
DIST="$4"
LUX_TAG="$5"
PAUSE=1

if [[ ! -d "$1" ]] ; then
	echo
	echo "LuxCore src path is incorrect"
	exit 1
fi

# enable LuxCore DLL building if sources dir contains "dll" or "sdk" postfix
# and it's not a LuxMark source tree
if echo $LUX_TAG | grep -iq -e 'dll' -e 'sdk' ; then
	echo " * LuxCore DLL enabled"
	BUILD_LUXCORE_DLL="-D BUILD_LUXCORE_DLL=1"
else
	echo " * LuxCore static enabled"
fi

# compile pyluxcore target only if sources dir contains "pyluxcore"
if echo $LUX_TAG | grep -iq 'pyluxcore' ; then
	echo " * pyluxcore target only"
	LUXCORE_TARGET='pyluxcore'
else
	LUXCORE_TARGET='luxrays luxcore pyluxcore luxcoreui'
fi

# build flags
LUXCORE_FLAGS=`echo $6 | sed s/'-fvisibility=hidden'//`" -pthread -lrt"

# platform specs
export CHOST="$7"
export CBUILD=$CHOST
export LDFLAGS="-static-libgcc -static-libstdc++"
CONFIGOPTS="--build=$CBUILD --host=$CHOST"
export CFLAGS="$6"
export CXXFLAGS="${CFLAGS}"
export CORE_COUNT=$(( `grep processor /proc/cpuinfo | wc -l` + 1))
export MAKEOPTS="-j $CORE_COUNT"
export TMP="$WORK"
export TEMP="$WORK"
export TMPDIR="$WORK"
export PYTHON_CMD="python3.11"
#export PYTHON_CMD="python3"

# enter venv
source .venv/bin/activate

unset CC CXX
if [[ -e "${ROOT}"/use_clang ]] ; then
	echo " * Using Clang compiler"
	CLANG=1
	LUXCORE_FLAGS="-mtune=generic -mno-ssse3 -mmmx -msse -msse2 -O3 -pipe -fvisibility-inlines-hidden -fno-stack-protector -fPIC -fopenmp=libomp"
	export CC="clang"
	export CXX="clang++"
	export LDFLAGS="${LDFLAGS} -O3 -Wl,-plugin,/usr/lib64/LLVMgold.so -L${TARGET}/lib -static-libgcc -static-libstdc++"
	export AR="${ROOT}/clang-ar"
	export NM="nm --plugin /usr/lib64/LLVMgold.so"
else
	echo " * Using GCC compiler"
fi

#####################################

mkdir -p $WORK 2>/dev/null
cd $ROOT

# compilation prechecks
echo -ne "\033]0;Preparing\007"
if [[ ! $STAGE ]] ; then
    S=`cat $TARGET/stage 2>/dev/null`
    if [[ ! $S ]] ; then
        STAGE=0
    else
        STAGE=$S
    fi
fi
if ! $ROOT/utils/prepare "$TARGET" "$DIST" ; then exit 1 ; fi

PYTHON_LIB=`find $TARGET -name 'libpython*'`
PYTHON_VARIANT=`if $(basename "$PYTHON_LIB" | grep -q 'm') ; then echo 'm' ; fi`
PYTHON_INCLUDE=`find /usr/include -type d -name "${PYTHON_CMD}*${PYTHON_VARIANT}" | awk '{ print length($0) " " $0; }' $file | sort -r -n | cut -d ' ' -f 2- | tail -n1 | sed s/'\n'//`
echo " * Using Python library path: $PYTHON_LIB"
echo " * Using Python include path: $PYTHON_INCLUDE"
echo

# STAGE 0.1 -- zlib
NEXT=0.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
    begin_stage zlib zlib*.tar.gz

    if echo $TARGET | grep -q '\-64' ; then
        ZLIB_PLATFORM="--64"
    else
        ZLIB_PLATFORM=""
    fi
    if ! ./configure --static $ZLIB_PLATFORM --prefix=$TARGET ; then
	echo " !!! zlib configuration failed"
	exit 1
    fi
    sleep $PAUSE
    if make $MAKEOPTS && make install ; then
	echo " * zlib compiled and installed successfully"
    else
	echo " !!! zlib compilation failed"
	exit 1
    fi

    complete_stage $NEXT
fi

# STAGE 0.2 -- bzip2
NEXT=0.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage bzip2 bzip2*.tar.gz

	echo " * Patching bzip2 Makefile for -fPIC support"
	patch Makefile $DIST/bzip2-1.0.8-fpic.patch
	if make $MAKEOPTS && make install PREFIX=$TARGET ; then
		echo " * bzip2 compiled and installed successfully"
	else
		echo " !!! bzip2 compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 0.3 -- lzma
NEXT=0.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage lzma xz*.tar.xz

	if ! ./configure --enable-static --disable-shared --disable-scripts --disable-xz \
	--disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links \
	$CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! lzma configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * lzma compiled and installed successfully"
	else
		echo " !!! lzma compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.1 -- Boost
NEXT=1.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage boost boost*.tar.gz

	echo " * Patching Boost Python support"
	patch libs/python/src/exec.cpp $DIST/boost.python-1.72.0.patch

	echo " * Patching glibc support"
	sed -e "s/#if PTHREAD_STACK_MIN > 0/#ifdef PTHREAD_STACK_MIN/" -i ./boost/thread/pthread/thread_data.hpp

	PYVER=`${PYTHON_CMD} --version 2>&1 | cut -d' ' -f2 | cut -d '.' -f'1 2'`
	TOOLSET=`if [[ $CLANG ]] ; then echo clang ; else echo gcc ; fi`
	echo " * Compiling boost for python-${PYVER}"
	sleep 1

	if ! ./bootstrap.sh --with-toolset=$TOOLSET --without-icu --prefix=$TARGET/boost \
		--with-python=/usr/bin/python${PYVER} \
		--with-python-root=`python${PYVER} -c "import sys; print(sys.prefix)"` ; then
		echo " !!! Boost bootstrap failed"
		exit 1
	fi

	# b2 debug options --debug-configuration -d0
	if ./b2 $MAKEOPTS --debug-configuration -d0 -aq --toolset=$TOOLSET cflags="$CFLAGS" cxxflags="$CXXFLAGS" \
		$CONFIGOPTS --prefix=$TARGET --layout=system --with-date_time --with-filesystem \
		--with-iostreams --with-locale --with-program_options --with-python --with-regex \
		--with-serialization --with-system --with-thread --with-chrono \
		threading=multi link=static \
		release install ; then
		# Fix boost python lib names
		mv -f $TARGET/lib/libboost_python*.a $TARGET/lib/libboost_python.a
		mv -f $TARGET/lib/libboost_numpy*.a $TARGET/lib/libboost_numpy.a
		pushd $(pwd)
		cd $TARGET/lib
		ln -s libboost_python.a libboost_python311.a
		ln -s libboost_numpy.a libboost_numpy311.a
		popd
		echo " * Boost compiled and installed successfully"
	else
		echo " !!! Boost compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.2 -- Jpeg
NEXT=1.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage jpeg jpeg*.tar.gz

	cp /usr/bin/libtool .
	if ! ./configure $CONFIGOPTS --enable-static --prefix=$TARGET ; then
		echo " !!! Jpeg configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && cp -vf .libs/libjpeg.a $TARGET/lib && \
	 cp -vf *.h $TARGET/include ; then
		echo " * Jpeg compiled and installed successfully"
	else
		echo " !!! Jpeg compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.3 -- Tiff
NEXT=1.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage tiff tiff*.tar.gz

	if ! ./configure --enable-static --disable-shared --disable-jbig $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! TIFF configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * TIFF compiled and installed successfully"
	else
		echo " !!! TIFF compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.4 -- PNG
NEXT=1.5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage png libpng*.tar.gz

	# --with-libpng-prefix=lux_
	if ! ./configure --enable-static --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! PNG configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install && cd $TARGET/include && ln -vs libpng* libpng ; then
		echo " * PNG compiled and installed successfully"
	else
		echo " !!! PNG compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.5 -- FreeType
NEXT=1.6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage freetype freetype*.tar.bz2

	if ! ./configure --enable-static --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! freetype configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * freetype compiled and installed successfully"
	else
		echo " !!! freetype compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.6 -- OpenEXR
NEXT=2.1
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage openexr openexr*.tar.gz

	mkdir -p build
	cd build || { echo "Failed to create build directory"; exit 1; }

	if ! cmake .. -DCMAKE_INSTALL_PREFIX="$TARGET" \
			-DBUILD_SHARED_LIBS=OFF \
			-DCMAKE_SYSTEM_NAME="$CHOST" ; then
		echo " !!! OpenEXR CMake configuration failed"
		exit 1
	fi

	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * openexr compiled and installed successfully"
	else
		echo " !!! openexr compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 2.1 -- OpenImageIO
NEXT=2.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage openimageio OpenImageIO*.tar.gz

	if CMAKE_BUILD_PARALLEL_LEVEL=$CORE_COUNT CMAKE_PREFIX_PATH=$TARGET make $MAKEOPTS BOOST_HOME=$TARGET ILMBASE_HOME=$TARGET \
		VERBOSE=1 USE_FFMPEG=0 EMBEDPLUGINS=1 \
		USE_OPENGL=0 USE_QT=0 USE_GIF=0 USE_OPENJPEG=0 USE_OPENSSL=0 \
		USE_FIELD3D=0 USE_OCIO=0 USE_OPENCV=0 USE_PYTHON=0 \
		BUILD_SHARED_LIBS=0 LINKSTATIC=1 OIIO_BUILD_TOOLS=0 OIIO_BUILD_TESTS=0 \
		STOP_ON_WARNING=0 ; then
		echo " * openimageio compiled successfully"
	else
		echo " !!! openimageio compilation failed"
		exit 1
	fi
	echo " * Installing openimageio library and headers"
	sleep $PAUSE
	if cp -vr dist/* $TARGET && cd $TARGET/lib && \
			mv -v libOpenImageIO.a libOpenImageIOBase.a && \
			ar -rcT libOpenImageIO.a libOpenImageIOBase.a libpng.a libjpeg.a libtiff.a \
			libIex-3_2.a libIlmThread-3_2.a libImath-3_1.a libz.a libbz2.a liblzma.a \
			libfreetype.a ; then
        echo " * openimageio installed successfully"
    else
        echo " !!! openimageio installation failed"
        exit 1
    fi

    complete_stage $NEXT
fi

# STAGE 3 -- Qt
NEXT=4.1
if [[ $STAGE && $STAGE < $NEXT ]] ; then
    if [[ ! -d "LuxMark" ]] ; then
	echo
	echo "LuxMark src not available, skipping the Qt stage"
    else
	begin_stage Qt qt-*.tar.gz

	cp -v ${DIST}/qt-install.sh .

	sleep 1
	if ./qt-install.sh $TARGET ; then
            echo " * Qt library and headers installed successfully"
	else
            echo " !!! Qt library and headers installation failed"
            exit 1
	fi
    fi

    complete_stage $NEXT
fi

# STAGE 4.1 -- TBB
NEXT=4.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage TBB tbb*_lin.tgz

	cp -v ${DIST}/tbb-install.sh .

    sleep 1
    if ./tbb-install.sh $TARGET ; then
        echo " * TBB library and headers installed successfully"
    else
        echo " !!! TBB library and headers installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 4.2 -- Oidn
NEXT=4.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage Oidn oidn-*.tar.gz

	cp -v ${DIST}/oidn-install.sh .

    sleep 1
    if ./oidn-install.sh $TARGET ; then
        echo " * Oidn library and headers installed successfully"
    else
        echo " !!! Oidn library and headers installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 4.3 -- Embree
NEXT=4.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage Embree embree-*.tar.gz

	cp -v ${DIST}/embree-install.sh .

    sleep 1
    if ./embree-install.sh $TARGET ; then
        echo " * Embree library and headers installed successfully"
    else
        echo " !!! Embree library and headers installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 4.4 -- C-blosc
NEXT=4.5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage C-blosc c-blosc-*.tgz

	cp -v ${DIST}/cblosc-install.sh .

    sleep 1
    if ./cblosc-install.sh $TARGET ; then
        echo " * C-blosc library and headers installed successfully"
    else
        echo " !!! C-blosc library and headers installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 4.5 -- NVRTC
NEXT=5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage NVRTC cuda*nvrtc*.tar.gz

	cp -v ${DIST}/nvrtc-install.sh .

    sleep 1
    if ./nvrtc-install.sh $TARGET ; then
        echo " * NVRTC library installed successfully"
    else
        echo " !!! NVRTC library installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 5 -- LuxCore
NEXT=6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	echo -ne "\033]0;LuxCore stage\007"

	cd $ROOT/$LUX_TAG

	echo " * Configuring $LUXCORE_TARGET"
	if ! cmake -G "Unix Makefiles" $BUILD_LUXCORE_DLL -Wno-dev \
			-D LUXRAYS_CUSTOM_CONFIG=cmake/SpecializedConfig/Config_Linux-Static.cmake \
			-D PYTHON_LIBRARY:FILEPATH="$PYTHON_LIB" \
			-D PYTHON_INCLUDE_DIR:PATH="$PYTHON_INCLUDE" \
			-D PYTHON_INCLUDE_DIRS:PATH="$PYTHON_INCLUDE" \
			-D EMBREE_SEARCH_PATH:PATH="$TARGET" \
			-D OIDN_SEARCH_PATH:PATH="$TARGET" \
			-D TBB_SEARCH_PATH:PATH="$TARGET" \
			-D BOOST_SEARCH_PATH:PATH="$TARGET" . ; then
		echo " !!! $LUXCORE_TARGET configuration failed"
		exit 1
	fi
	sleep $PAUSE
	echo " * Compiling $LUXCORE_TARGET"
#	if cmake --build . -- $MAKEOPTS ; then
	if cmake --build . --verbose ; then
            echo " * $LUXCORE_TARGET compiled successfully"
	else
            echo " !!! $LUXCORE_TARGET compilation failed"
            exit 1
	fi

    mkdir ${TARGET}/$LUX_TAG 2>/dev/null
	if echo $LUX_TAG | grep -iq 'pyluxcore' ; then
	    cp -vf lib/*.so ${TARGET}/$LUX_TAG

	    sleep $PAUSE
	    cd $ROOT
	    exit 0
	fi

	complete_stage $NEXT

	sleep $PAUSE
	cd $ROOT
fi

# STAGE 6 -- LuxMark
NEXT=7
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	echo -ne "\033]0;LuxMark stage\007"

	if [[ ! -d "LuxMark" ]] ; then
		echo
		echo "LuxMark src not available, skipping the stage"
	else
		cd $ROOT/LuxMark

		echo " * Configuring LuxMark"
		if ! cmake -G "Unix Makefiles" -Wno-dev \
				-D LUXMARK_CUSTOM_CONFIG=cmake/SpecializedConfig/Config_Linux-Static.cmake \
				-D LuxRays_HOME="$ROOT/$LUX_TAG" . ; then
			echo " !!! LuxMark configuration failed"
			exit 1
		fi
		sleep $PAUSE
		echo " * Compiling LuxMark"
		if cmake --build . --target all -- $MAKEOPTS ; then
				echo " * LuxMark compiled successfully"
		else
				echo " !!! LuxMark compilation failed"
				exit 1
		fi
	fi

	complete_stage $NEXT

	sleep $PAUSE
	cd $ROOT
fi
